{/* <div class="calendar-panel">
                <button class="arrow">
                  <FontAwesomeIcon
                    icon={faArrowLeft}
                    disabled={LeftbuttonDisabled}
                    onClick={() =>  {
                      // if (month === -1) {
                      //   setMonth(12);
                      //   // setLeftButtonDisabled(true);
                      // } else {
                      //   console.log("Left Button Clicked");
                      //   let tmp = month - 1;
                      //   console.log(tmp)
                      //   setMonth(tmp);
                      //   const ans = getMonthData(
                      //     new Date().getFullYear(),
                      //     tmp
                      //   );
                        decrementMonth()
                        const ans = getMonthData(new Date().getFullYear, month)
                        console.log("month= " + month);
                        setnumDays(ans.numDays);
                        setfirstDay(ans.firstDay);
                        setmonthname(monthNames[month]);
                        setLeftButtonDisabled(false);
                    }}
                  />
                </button>
                <div class="calendar">
                  <span>{monthname}</span>
                  <div class="week">
                    <span class="day header">Sun</span>
                    <span class="day header">Mon</span>
                    <span class="day header">Tue</span>
                    <span class="day header">Wed</span>
                    <span class="day header">Thu</span>
                    <span class="day header">Fri</span>
                    <span class="day header">Sat</span>
                  </div>
                  {weeks.map((week, index) => (
                    <div class="week" key={index}>
                      {week.map((day) => (
                        <span
                          key={day.day}
                          class={`day ${
                            day.isLeaveTaken ? "taken" : "not-taken"
                          }`}
                        >
                          {day.day}
                        </span>
                      ))}
                    </div>
                  ))}
                </div>
                <button
                  class="arrow"
                  disabled={RightbuttonDisabled}
                  onClick={() => {
                    // if (month === 12) {
                    //   setMonth(-1);
                    //   // setLeftButtonDisabled(true);
                    // } else {
                    //   let tmp = month + 1;
                    //   setMonth(tmp);
                    //   const ans = getMonthData(new Date().getFullYear(), tmp);
                    incrementMonth();
                    const ans = getMonthData(new Date().getFullYear, month);
                    console.log("month= " + month);
                    setnumDays(ans.numDays);
                    setfirstDay(ans.firstDay);
                    setmonthname(monthNames[month]);
                    setLeftButtonDisabled(false);
                  }}
                >
                  <FontAwesomeIcon icon={faArrowRight} />
                </button>
              </div> */}



  // if (weeks.length > 0 && weeks[weeks.length - 1].length < 7) {
  //   const lastWeek = weeks[weeks.length - 1];
  //   const emptyCells = 7 - lastWeek.length;
  //   lastWeek.push(...Array.from({ length: emptyCells }, () => null));
  // }

  // console.log(weeks)


  const [weeks, getweeks] = useState([]);
  useEffect(() => {
    let data = [];

    // console.log("first Day = " + firstDay)
    for (let i = 0; i < numDays; i++) {
      if (i % 2) data.push({ day: i + 1, isLeaveTaken: false });
      else data.push({ day: i + 1, isLeaveTaken: true });
    }

    const weeks = [];
    let week = [];

    // Group the data into weeks
    // data.forEach((day, index) => {
    //   week.push(day);
    //   if (index % 7 === 6) {
    //     weeks.push(week);
    //     week = [];
    //   }
    // });
    for (let j = 0; j < firstDay; j++) {
      week.push(0);
    }

    data.forEach((day, index) => {
      week.push(day);
      if (index === data.length - 1) {
        while (week.length != 7) {
          week.push(0);
        }
      }
      if (index === data.length - 1 || week.length % 7 === 0) {
        weeks.push(week);
        week = [];
      }
      getweeks(weeks);
    });
  }, [weeks]);

const [monthname, setmonthname] = useState(monthNames[month]);
  const [numDays, setnumDays] = useState(ans.numDays);
  const [firstDay, setfirstDay] = useState(ans.firstDay);
   

  
const incrementMonth = () => {
  setMonth((prevMonth) => {
    const newMonth = prevMonth + 1;
    if (newMonth > 11) {
      return 0;
    } else {
      return newMonth;
    }
  });
};

const decrementMonth = () => {
  setMonth((prevMonth) => {
    const newMonth = prevMonth - 1;
    if (newMonth < 0) {
      return 11;
    } else {
      return newMonth;
    }
  });
};

  // const numDays = new Date(month.getFullYear(), month.getMonth() + 1, 0).getDate();
  // const firstDay = new Date(month.getFullYear(), month.getMonth(), 1).getDay();

  
  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  // const [month, setMonth] = useState(new Date().getMonth());
  // console.log(month)
  // console.log(new Date().getFullYear());
  const [month,setMonth] = useState(new Date().getMonth());
  // console.log(month);
  const ans = getMonthData(new Date().getFullYear(), month);

    // const [progress, setProgress] = useState();
  // useEffect(() => {
  //   let casual = document.querySelector(".casual-leaves");
  //   let casual_value = document.querySelector(".value-casual-leaves");
  //   let vacations = document.querySelector(".vacation-leaves");
  //   let vacations_value = document.querySelector(".value-vacation-leaves");
  //   let restricted = document.querySelector(".restricted-leaves");
  //   let restricted_value = document.querySelector(".value-restricted-leaves");
  //   let earned = document.querySelector(".earned-leaves");
  //   let earned_value = document.querySelector(".value-earned-leaves");
  //   let study = document.querySelector(".study-leaves");
  //   let study_value = document.querySelector(".value-study-leaves");
  //   setProgress(setInterval(() => {
  //     progressValue++;
  //     if (progressValue <= casual_end_value) {
  //       casual_value.textContent = `${progressValue}%`;
  //       casual.style.background = `conic-gradient(
  //       #4d5bf9 ${progressValue * 3.6}deg,
  //       #cadcff ${progressValue * 3.6}deg
  //     )`;
  //     }
  //     if (progressValue <= vacations_end_value) {
  //       vacations_value.textContent = `${progressValue}%`;
  //       vacations.style.background = `conic-gradient(
  //       #4d5bf9 ${progressValue * 3.6}deg,
  //       #cadcff ${progressValue * 3.6}deg
  //     )`;
  //     }
  //     if (progressValue <= restricted_end_value) {
  //       restricted_value.textContent = `${progressValue}%`;
  //       restricted.style.background = `conic-gradient(
  //       #4d5bf9 ${progressValue * 3.6}deg,
  //       #cadcff ${progressValue * 3.6}deg
  //     )`;
  //     }
  //     if (progressValue <= earned_end_value) {
  //       earned_value.textContent = `${progressValue}%`;
  //       earned.style.background = `conic-gradient(
  //       #4d5bf9 ${progressValue * 3.6}deg,
  //       #cadcff ${progressValue * 3.6}deg
  //     )`;
  //     }
  //     if (progressValue <= study_end_value) {
  //       study_value.textContent = `${progressValue}%`;
  //       study.style.background = `conic-gradient(
  //       #4d5bf9 ${progressValue * 3.6}deg,
  //       #cadcff ${progressValue * 3.6}deg
  //     )`;
  //     }
  //     if (progressValue == 100) {
  //       clearInterval(progress);
  //     }
  //   }, speed));
    
  // },[])
  
 let progressValue = 0;
  let casual_end_value = 50;
  let vacations_end_value = 84;
  let restricted_end_value = 24;
  let earned_end_value = 42;
  let study_end_value = 96;
  let speed = 20;

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowLeft, faArrowRight } from "@fortawesome/free-solid-svg-icons";

const getMonthData = (year, month) => {
  const numDays = new Date(year, month + 1, 0).getDate();
  const firstDay = new Date(year, month, 1).getDay();
  return { numDays, firstDay };
};